// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	applyconfigurationapiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/applyconfiguration/api/v1alpha1"
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
	scheme "github.com/kgateway-dev/kgateway/v2/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// TrafficPoliciesGetter has a method to return a TrafficPolicyInterface.
// A group's client should implement this interface.
type TrafficPoliciesGetter interface {
	TrafficPolicies(namespace string) TrafficPolicyInterface
}

// TrafficPolicyInterface has methods to work with TrafficPolicy resources.
type TrafficPolicyInterface interface {
	Create(ctx context.Context, trafficPolicy *apiv1alpha1.TrafficPolicy, opts v1.CreateOptions) (*apiv1alpha1.TrafficPolicy, error)
	Update(ctx context.Context, trafficPolicy *apiv1alpha1.TrafficPolicy, opts v1.UpdateOptions) (*apiv1alpha1.TrafficPolicy, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, trafficPolicy *apiv1alpha1.TrafficPolicy, opts v1.UpdateOptions) (*apiv1alpha1.TrafficPolicy, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*apiv1alpha1.TrafficPolicy, error)
	List(ctx context.Context, opts v1.ListOptions) (*apiv1alpha1.TrafficPolicyList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apiv1alpha1.TrafficPolicy, err error)
	Apply(ctx context.Context, trafficPolicy *applyconfigurationapiv1alpha1.TrafficPolicyApplyConfiguration, opts v1.ApplyOptions) (result *apiv1alpha1.TrafficPolicy, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, trafficPolicy *applyconfigurationapiv1alpha1.TrafficPolicyApplyConfiguration, opts v1.ApplyOptions) (result *apiv1alpha1.TrafficPolicy, err error)
	TrafficPolicyExpansion
}

// trafficPolicies implements TrafficPolicyInterface
type trafficPolicies struct {
	*gentype.ClientWithListAndApply[*apiv1alpha1.TrafficPolicy, *apiv1alpha1.TrafficPolicyList, *applyconfigurationapiv1alpha1.TrafficPolicyApplyConfiguration]
}

// newTrafficPolicies returns a TrafficPolicies
func newTrafficPolicies(c *GatewayV1alpha1Client, namespace string) *trafficPolicies {
	return &trafficPolicies{
		gentype.NewClientWithListAndApply[*apiv1alpha1.TrafficPolicy, *apiv1alpha1.TrafficPolicyList, *applyconfigurationapiv1alpha1.TrafficPolicyApplyConfiguration](
			"trafficpolicies",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apiv1alpha1.TrafficPolicy { return &apiv1alpha1.TrafficPolicy{} },
			func() *apiv1alpha1.TrafficPolicyList { return &apiv1alpha1.TrafficPolicyList{} },
		),
	}
}
