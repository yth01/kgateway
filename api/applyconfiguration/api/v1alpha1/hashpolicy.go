// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// HashPolicyApplyConfiguration represents a declarative configuration of the HashPolicy type for use
// with apply.
type HashPolicyApplyConfiguration struct {
	Header   *HeaderApplyConfiguration `json:"header,omitempty"`
	Cookie   *CookieApplyConfiguration `json:"cookie,omitempty"`
	SourceIP *apiv1alpha1.SourceIP     `json:"sourceIP,omitempty"`
	Terminal *bool                     `json:"terminal,omitempty"`
}

// HashPolicyApplyConfiguration constructs a declarative configuration of the HashPolicy type for use with
// apply.
func HashPolicy() *HashPolicyApplyConfiguration {
	return &HashPolicyApplyConfiguration{}
}

// WithHeader sets the Header field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Header field is set to the value of the last call.
func (b *HashPolicyApplyConfiguration) WithHeader(value *HeaderApplyConfiguration) *HashPolicyApplyConfiguration {
	b.Header = value
	return b
}

// WithCookie sets the Cookie field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cookie field is set to the value of the last call.
func (b *HashPolicyApplyConfiguration) WithCookie(value *CookieApplyConfiguration) *HashPolicyApplyConfiguration {
	b.Cookie = value
	return b
}

// WithSourceIP sets the SourceIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SourceIP field is set to the value of the last call.
func (b *HashPolicyApplyConfiguration) WithSourceIP(value apiv1alpha1.SourceIP) *HashPolicyApplyConfiguration {
	b.SourceIP = &value
	return b
}

// WithTerminal sets the Terminal field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Terminal field is set to the value of the last call.
func (b *HashPolicyApplyConfiguration) WithTerminal(value bool) *HashPolicyApplyConfiguration {
	b.Terminal = &value
	return b
}
