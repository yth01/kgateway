// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// CSRFPolicyApplyConfiguration represents a declarative configuration of the CSRFPolicy type for use
// with apply.
type CSRFPolicyApplyConfiguration struct {
	PercentageEnabled  *uint32                           `json:"percentageEnabled,omitempty"`
	PercentageShadowed *uint32                           `json:"percentageShadowed,omitempty"`
	AdditionalOrigins  []StringMatcherApplyConfiguration `json:"additionalOrigins,omitempty"`
}

// CSRFPolicyApplyConfiguration constructs a declarative configuration of the CSRFPolicy type for use with
// apply.
func CSRFPolicy() *CSRFPolicyApplyConfiguration {
	return &CSRFPolicyApplyConfiguration{}
}

// WithPercentageEnabled sets the PercentageEnabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PercentageEnabled field is set to the value of the last call.
func (b *CSRFPolicyApplyConfiguration) WithPercentageEnabled(value uint32) *CSRFPolicyApplyConfiguration {
	b.PercentageEnabled = &value
	return b
}

// WithPercentageShadowed sets the PercentageShadowed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PercentageShadowed field is set to the value of the last call.
func (b *CSRFPolicyApplyConfiguration) WithPercentageShadowed(value uint32) *CSRFPolicyApplyConfiguration {
	b.PercentageShadowed = &value
	return b
}

// WithAdditionalOrigins adds the given value to the AdditionalOrigins field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalOrigins field.
func (b *CSRFPolicyApplyConfiguration) WithAdditionalOrigins(values ...*StringMatcherApplyConfiguration) *CSRFPolicyApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAdditionalOrigins")
		}
		b.AdditionalOrigins = append(b.AdditionalOrigins, *values[i])
	}
	return b
}
