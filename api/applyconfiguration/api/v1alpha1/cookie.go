// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CookieApplyConfiguration represents a declarative configuration of the Cookie type for use
// with apply.
type CookieApplyConfiguration struct {
	Name       *string           `json:"name,omitempty"`
	Path       *string           `json:"path,omitempty"`
	TTL        *v1.Duration      `json:"ttl,omitempty"`
	Attributes map[string]string `json:"attributes,omitempty"`
}

// CookieApplyConfiguration constructs a declarative configuration of the Cookie type for use with
// apply.
func Cookie() *CookieApplyConfiguration {
	return &CookieApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *CookieApplyConfiguration) WithName(value string) *CookieApplyConfiguration {
	b.Name = &value
	return b
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *CookieApplyConfiguration) WithPath(value string) *CookieApplyConfiguration {
	b.Path = &value
	return b
}

// WithTTL sets the TTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TTL field is set to the value of the last call.
func (b *CookieApplyConfiguration) WithTTL(value v1.Duration) *CookieApplyConfiguration {
	b.TTL = &value
	return b
}

// WithAttributes puts the entries into the Attributes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Attributes field,
// overwriting an existing map entries in Attributes field with the same key.
func (b *CookieApplyConfiguration) WithAttributes(entries map[string]string) *CookieApplyConfiguration {
	if b.Attributes == nil && len(entries) > 0 {
		b.Attributes = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Attributes[k] = v
	}
	return b
}
